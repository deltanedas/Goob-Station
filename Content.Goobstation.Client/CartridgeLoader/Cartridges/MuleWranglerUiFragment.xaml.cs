using System.Linq;
using Content.Client.PDA;
using Content.Shared._Goobstation.CartridgeLoader.Cartridges;
using Content.Shared._Goobstation.MULE.Components;
using Content.Shared.NameIdentifier;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Goobstation.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class MuleWranglerUiFragment : BoxContainer
{
    [Dependency] private readonly EntityManager _entMan = default!;

    public EntityUid Owner;
    public List<NetEntity> MuleList = new();
    public List<NetEntity> BeaconList = new();

    public NetEntity? SelectedMule;
    public string? MuleName;
    public NetEntity? SelectedBeacon;

    public event Action? OnTransport;
    public event Action? OnReturn;
    public event Action? OnUnload; // TODO implement
    public event Action<NetEntity?>? OnSetMule;
    public event Action<NetEntity?>? OnSetBeacon;

    public MuleWranglerUiFragment(EntityUid owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Owner = owner;
        Home();
    }

    public void UpdateState(MuleWranglerUiState state)
    {
        if (!_entMan.TryGetComponent<MuleWranglerCartridgeComponent>(owner, out var comp))
            return;

        MuleList = state.Mules;
        BeaconList = state.Beacons;
        MuleName = state.MuleName;

        if (SelectedMule != comp.SelectedMule)
        {
            SelectedMule = comp.SelectedMule;
            SetMuleText();
        }

        SelectedBeacon = comp.SelectedBeacon;
    }

    private void ClearButtons()
    {
        ButtonContainer.RemoveAllChildren();
    }

    private void PopulateMules()
    {
        ClearButtons();

        foreach (var (mule, name) in MuleList)
        {
            var newButton = new PdaSettingsButton();
            newButton.Text = name;
            pdaButton.OnPressed += _ =>
            {
                SelectedMule = mule;
                OnSetMule?.Invoke(mule);
                Home();
            };
            ButtonContainer.AddChild(newButton);
        }
    }

    private void PopulateBeacon()
    {
        ClearButtons();

        foreach (var (beacon, name) in BeaconList)
        {
            var newButton = new PdaSettingsButton();
            newButton.Text = name;
            pdaButton.OnPressed += _ =>
            {
                SelectedBeacon = beacon;
                OnSetBeacon?.Invoke(beacon);
                Home();
            };
            ButtonContainer.AddChild(newButton);
        }
    }

    private void SetupOrders()
    {
        ClearButtons();

        var deliverButton = new PdaSettingsButton();
        var returnButton = new PdaSettingsButton();
        deliverButton.Text = Loc.GetString("mule-wrangler-deliver");
        returnButton.Text = Loc.GetString("mule-wrangler-return");
        deliverButton.OnPressed += _ => Deliver();
        deliverButton.Disabled = SelectedBeacon == null || SelectedMule == null;
        returnButton.OnPressed += _ => Home();
        ButtonContainer.AddChild(deliverButton);
        ButtonContainer.AddChild(returnButton);
    }

    private void Deliver()
    {
        OnTransport?.Invoke();
        Home();
    }

    private void SetMuleText()
    {
        IdentifyMuleLabel.Text = MuleName ?? Loc.GetString("mule-wrangler-no-mule");
    }

    private void Home()
    {
        ClearButtons();

        // TODO: jesus christ put this in xaml
        var selectButton = new PdaSettingsButton();
        var orderButton = new PdaSettingsButton();
        var destinationButton = new PdaSettingsButton();
        selectButton.Text = Loc.GetString("mule-wrangler-select");
        selectButton.Description = Loc.GetString("mule-wrangler-select-desc");
        orderButton.Text = Loc.GetString("mule-wrangler-order");
        orderButton.Description = Loc.GetString("mule-wrangler-order-desc");
        destinationButton.Text = Loc.GetString("mule-wrangler-set-destination");
        destinationButton.Description = Loc.GetString("mule-wrangler-set-destination-desc");
        selectButton.OnPressed += _ => PopulateMules();
        orderButton.OnPressed += _ => SetupOrders();
        destinationButton.OnPressed += _ => PopulateBeacon();
        ButtonContainer.AddChild(selectButton);
        ButtonContainer.AddChild(orderButton);
        ButtonContainer.AddChild(destinationButton);

        SetMuleText();
    }
}
